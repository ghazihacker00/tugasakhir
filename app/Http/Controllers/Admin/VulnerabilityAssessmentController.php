<?php

namespace App\Http\Controllers\Admin;

use App\Http\Controllers\Controller;
use App\Models\VulnerabilityAssessmentRequest;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Mail;

class VulnerabilityAssessmentController extends Controller
{
    public function index(Request $request)
    {
        $search = $request->input('search');

        $vulnerabilityRequests = VulnerabilityAssessmentRequest::when($search, function ($query, $search) {
            return $query->where('nama_lengkap', 'like', "%{$search}%")
                         ->orWhere('nik_nip', 'like', "%{$search}%")
                         ->orWhere('kode_tiket', 'like', "%{$search}%")
                         ->orWhere('email_pemohon', 'like', "%{$search}%");
        })->paginate(10);

        return view('admin.vulnerability-assessment.index', compact('vulnerabilityRequests', 'search'));
    }

    public function edit($id)
    {
        $vulnerabilityRequest = VulnerabilityAssessmentRequest::findOrFail($id);
        return view('admin.vulnerability-assessment.edit', compact('vulnerabilityRequest'));
    }

    public function update(Request $request, $id)
    {
        $request->validate([
            'nama_lengkap' => 'required|string|max:255',
            'nik_nip' => 'required|string|max:255',
            'jabatan' => 'required|string|max:255',
            'pangkat_golongan_eselon' => 'required|string|max:255',
            'dinas_unit_kerja' => 'required|string|max:255',
            'instansi' => 'required|string|max:255',
            'email_pemohon' => 'required|email|max:255',
            'telepon' => 'required|string|max:255',
            'nama_aplikasi' => 'required|string|max:255',
            'url_aplikasi' => 'required|string|max:255',
            'penetration_test_ke' => 'required|integer',
            'status' => 'required|string|max:255',
        ]);

        $vulnerabilityRequest = VulnerabilityAssessmentRequest::findOrFail($id);
        $vulnerabilityRequest->update($request->all());

        return redirect()->route('admin.vulnerability-assessment.index')
                         ->with('success', 'Data berhasil diperbarui.');
    }

    public function destroy($id)
    {
        $vulnerabilityRequest = VulnerabilityAssessmentRequest::findOrFail($id);
        $vulnerabilityRequest->delete();

        return redirect()->route('admin.vulnerability-assessment.index')
                         ->with('success', 'Data berhasil dihapus.');
    }

    public function updateStatus(Request $request, $id)
    {
        $vulnerabilityRequest = VulnerabilityAssessmentRequest::findOrFail($id);
        $newStatus = $request->input('status');
        $vulnerabilityRequest->update(['status' => $newStatus]);

        // Kirim notifikasi email kepada user
        $this->sendStatusUpdateEmail($vulnerabilityRequest);

        if ($newStatus === 'rejected') {
            return redirect()->route('admin.vulnerability-assessment.rejected', $vulnerabilityRequest->id);
        }

        return redirect()->route('admin.vulnerability-assessment.index')
                         ->with('success', 'Status berhasil diperbarui.');
    }

    public function rejected($id)
    {
        $vulnerabilityRequest = VulnerabilityAssessmentRequest::findOrFail($id);
        return view('admin.vulnerability-assessment.rejected', compact('vulnerabilityRequest'));
    }

    public function submitRejectionReason(Request $request, $id)
    {
        $request->validate([
            'reason' => 'required|string|max:1000',
        ]);

        $vulnerabilityRequest = VulnerabilityAssessmentRequest::findOrFail($id);

        // Kirim email alasan penolakan
        Mail::send('emails.vulnerability-assessment-rejection-reason', [
            'nama_lengkap' => $vulnerabilityRequest->nama_lengkap,
            'kode_tiket' => $vulnerabilityRequest->kode_tiket,
            'reason' => $request->input('reason'),
        ], function ($message) use ($vulnerabilityRequest) {
            $message->to($vulnerabilityRequest->email_pemohon)
                    ->subject('Alasan Penolakan Pengajuan Vulnerability Assessment');
        });

        return redirect()->route('admin.vulnerability-assessment.index')
                         ->with('success', 'Alasan penolakan berhasil dikirim.');
    }

    private function sendStatusUpdateEmail($vulnerabilityRequest)
    {
        $data = [
            'nama_lengkap' => $vulnerabilityRequest->nama_lengkap,
            'kode_tiket' => $vulnerabilityRequest->kode_tiket,
            'status' => $vulnerabilityRequest->status,
        ];

        Mail::send('emails.vulnerability-assessment-status-update', $data, function ($message) use ($vulnerabilityRequest) {
            $message->to($vulnerabilityRequest->email_pemohon)
                    ->subject('Status Tiket Anda Telah Diperbarui');
        });
    }
}
